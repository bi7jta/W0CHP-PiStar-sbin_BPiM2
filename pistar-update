#!/bin/bash
#
###############################################################################
#                                                                             #
#                        Pi-Star Auto Update Tool                             #
#                                                                             #
#              Design and Development by Andy Taylor (MW0MWZ)                 #
#                            Enhanced by W0CHP                                #
#                                                                             #
###############################################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

exec 200>/var/lock/pistar-update.lock || exit 1
if ! flock -n 200 ; then
  echo -e "Another instance is already running...\n"
  exit 1
fi

versionCmd=$( git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git rev-parse --short=10 HEAD )
psVer=$( grep Version /etc/pistar-release | awk '{print $3}' )
W0CHP_DASH_BRANCH="$( git --git-dir=/var/www/dashboard/.git branch | grep '*' | awk {'print $2'} )"


#SUPPORTING_FILES_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Installer/raw/branch/master/supporting-files"
#W0CHP_INSTALL_SCRIPT_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Installer/raw/branch/master/WPSD-Installer"
#CONN_CHECK_URI="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Dash.git"

# for BPi-M2U,BPi-M2z stretch , BPi-M5 bullseye, will merge to W0CHP once all perfect.
SUPPORTING_FILES_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Installer/raw/branch/master/supporting-files"
W0CHP_INSTALL_SCRIPT_REPO="404.page"
CONN_CHECK_URI="https://github.com/bi7jta/W0CHP-PiStar-Dash_BPiM2.git"

CALL=$( grep "Callsign" /etc/pistar-release | awk '{print $3}' )
osName=$( lsb_release -cs )
uuidStr=$(egrep 'UUID|ModemType|ModemMode|ControllerType' /etc/pistar-release | awk {'print $3'} | tac | xargs| sed 's/ /_/g')
modelName=$(grep -m 1 'model name' /proc/cpuinfo | sed 's/.*: //')
hardwareField=$(grep 'Model' /proc/cpuinfo | sed 's/.*: //')
hwDeetz="${hardwareField} - ${modelName}"
uaStr="WPSD-Update (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]"
uaStrSF="WPSD-SuppFiles (Manual Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]"
TICK="[âœ“]"
INFO="[i]"

# connectivity check
conn_check() {
    echo -e "\nChecking for connectivity to the W0CHP Update Server (can take up to 30 seconds; please wait...)"
    status_code=$(curl -I -m 30 -A "ConnCheck ${uaStr}" --write-out %{http_code} --silent --output /dev/null "$CONN_CHECK_URI")
    if [[ $status_code == 20* ]] || [[ $status_code == 30* ]] ; then
	echo -e "${TICK} Connection established!\n"
    else
	echo -e "[X] Cannot connect to the W0CHP Update Server. Try again later. Exiting...\n"
	exit 1
    fi
}

mount -o remount,rw / # for shits and giggles

# ensure repos can be updated
if ! grep -q 'safe' /root/.gitconfig > /dev/null 2<&1 ; then
    git config --global --add safe.directory /var/www/dashboard > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/bin > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/sbin > /dev/null 2<&1
fi
# ensure bullseye uses ff-only for newer git strategy
if [ "${osName}" = "bullseye" ]; then
    git config --global pull.ff only
fi

# bullseye; change weird interface names* back to what most are accustomed to;
# <https://wiki.debian.org/NetworkInterfaceNames#THE_.22PREDICTABLE_NAMES.22_SCHEME>
OS_VER=$( cat /etc/debian_version | sed 's/\..*//')
if [ "${OS_VER}" -gt "10" ] && [[ ! $(grep "net.ifnames" /boot/cmdline.txt) ]] ; then
    sed -i 's/$/ net.ifnames=0 biosdevname=0/' /boot/cmdline.txt
fi

# ensure pistar-remote config has key-value pairs for new funcs (12/2/22)
if ! grep -q 'hostfiles=8999995' /etc/pistar-remote ; then 
    sed -i "/^# TG commands.*/a hostfiles=8999995" /etc/pistar-remote
fi
if ! grep -q 'reconnect=8999994' /etc/pistar-remote ; then 
    sed -i "/^# TG commands.*/a reconnect=8999994" /etc/pistar-remote
fi

git_checkUpdateRequired() {
	# Set the function variables
	gitFolder=${1}
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
	# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, check that branch.
	gitBranch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"

	# Git check / update function
	gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git ls-remote --heads ${gitRemoteURL} | grep ${gitBranch} | awk {'print $1'})
	gitStatusLocal=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git log ${gitBranch} --pretty=tformat:"%H" -1)

	# Return the output
	if [[ ${gitStatusRemote} != ${gitStatusLocal} ]]; then
		echo "1"
	else
		echo "0"
	fi
}

git_update() {
	# Set the function variables
	gitFolder=${1}
	# get proper W0CHP dash branch user is running...
	dash_branch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"

	# Handle the special case for /usr/local/sbin
	if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
		# Assume unchanged for pistar-upnp.service
		git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git update-index --assume-unchanged pistar-upnp.service
	fi

	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
		echo "Updating ${gitFolder}..."
        	# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
        	if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
                cd ${gitFolder}
                git stash > /dev/null 2<&1 # save user config files: config/config.php config/ircddblocal.php config/language.php
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin ${dash_branch} &> /dev/null
                git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php > /dev/null 2<&1 # restore user config files from stash
                git stash clear > /dev/null 2<&1 # housekeeping
                echo -e "ChangeLog (last 3 changes):"
		echo -e "---------------------------"
                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n3 | cut --complement -d' ' -f1
        	else
			# If this script is updated, re-run the update with the new version.
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
                        	git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard 
                        	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch
                        	if [ "$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git diff --name-only origin/master 2>/dev/null | grep pistar-update 2>/dev/null)" = "pistar-update" ]; then
                                	echo -e "\n\nFound a new version of pistar-update..."
                                	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master &> /dev/null
                                	echo -e "ChangeLog (last 3 changes):"
					echo -e "---------------------------"
                                	git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n3 | cut --complement -d' ' -f1
                                	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
                                        	echo "Update to new version of update script was not successful, forcing update..."
						if [ -f ${gitFolder}/pistar-upnp.service ]; then
						rm -f ${gitFolder}/pistar-upnp.service
					fi
                                        env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
                                fi
                                echo -e "\n\n[*] Restarting update process with the new version..."
                                exec "$0" "$@"
                                exit 1
                        fi
                fi
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master &> /dev/null
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
                echo -e "ChangeLog (last 3 changes):"
		echo -e "---------------------------"
                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n3 | cut --complement -d' ' -f1
		fi
		# Re-check that the updates are now good
		if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
				rm -rf ${gitFolder}/pistar-upnp.service
			fi
			#echo "Updates were not successful, reverting to original files..."
           		# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
           		if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
               			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/${dash_branch}
           		else
    	    			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
			fi
		fi
                if [[ ${gitFolder} == "/usr/local/.W0CHP_bin" ]]; then
                	echo "Updating W0CHP-PiStar-Dash Custom Binaries (DG-ID_M17 branch)..."
                	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q &> /dev/null
              	fi
               	else
                	echo -e "${INFO} No updates for ${gitFolder} available"
	fi
}

main_function() {
	# Make the disk writable and stop cron to prevent it from making it R/O
    	systemctl stop cron.service > /dev/null 2<&1
    	pkill pistar-hourly.cron > /dev/null 2>&1
    	pkill pistar-daily.cron > /dev/null 2>&1

    # Ignore update OS because I am a Raspbian.

	#conn_check
	echo "Stopping Services..."
	pistar-services fullstop > /dev/null 2>&1
	echo -e "${TICK} Done!\n"

	# ensure FS is RW
	touch /root/.WPSD-updating > /dev/null 2>&1
	if [ ! -f /root/.WPSD-updating ] ; then
	    touch /root/.WPSD-updating > /dev/null 2>&1
	    if [ ! -f /root/.WPSD-updating ] ; then
		echo -e "Filesystem could not enter R/W mode...please try updating again.\n"
		exit 1
	    fi
	fi

	echo "Updating W0CHP-PiStar-Dash Scripts and Support Programs..."
	git_update /usr/local/sbin
	#systemctl daemon-reload > /dev/null 2>&1
	echo -e "${TICK} Done!\n"

	echo "Updating W0CHP-PiStar-Dash Digital Voice and Related Binaries..."
	git_update /usr/local/bin
	echo -e "${TICK} Done!\n"

	echo "Updating W0CHP-PiStar-Dash Web Dashboard Software..."
	git_update /var/www/dashboard
	echo -e "${TICK} Done!\n"

	if ! [ -f /root/M17Hosts.txt ]; then
	    echo -e "# Format: Reflector Name IP Port\n# Example:\n# M17-000    81.231.241.25    17000\n\n" > /root/M17Hosts.txt
	fi
	echo "Updating Hostfiles, User ID DB's & Various Talkgroup Lists..."
	/usr/local/sbin/HostFilesUpdate.sh 
	echo -e "${TICK} Done!\n"

	echo "Updating Pi-Star-Firewall..."
	# check if user already has firewall disabled, and if so, ensure it's kept that way.
	if ! grep -q LOGNDROP /etc/iptables.rules ; then
        	/usr/local/sbin/pistar-system-manager -dfw > /dev/null 2>&1
    	else
        	/usr/local/sbin/pistar-system-manager -efw > /dev/null 2>&1
    	fi
	echo -e "${TICK} Done!\n"

	echo "Performing maintenance tasks..."

	/usr/local/sbin/wpsd-backend-maint > /dev/null 2>&1
        # Check for gpsd
	systemctl disable mobilegps.timer > /dev/null 2<&1
	systemctl disable mobilegps.service > /dev/null 2<&1
	if compgen -G "/lib/systemd/system/mobilegps*" > /dev/null; then
	    rm -rf /lib/systemd/system/mobilegps*
	fi
	if ! [ -x "$(command -v gpsd)" ]; then
	    echo "GPSd (required) not installed. ignore it now..."
    fi

	# check for vnstat
	if ! [ -x "$(command -v vnstat)" ]; then
	    echo "vnstat (required) not installed on hotspot. ignore it..."
        fi
	# tmpfs for vnstat
	if ! grep -q vnstat /etc/fstab ; then
	    systemctl stop vnstat.service > /dev/null
	    umount /var/lib/vnstat > /dev/null
	    rm -rf /var/lib/vnstat > /dev/null
	    mkdir -p /var/lib/vnstat > /dev/null
	    chown -R vnstat:vnstat /var/lib/vnstat > /dev/null
	    echo "tmpfs                   /var/lib/vnstat         tmpfs   nodev,noatime,nosuid,mode=0755,size=64m         0       0"  >> /etc/fstab
	    mount /var/lib/vnstat > /dev/null
	    chown -R vnstat:vnstat /var/lib/vnstat > /dev/null
	    systemctl restart vnstat.service > /dev/null
	fi

	# swap ntpd for systemd-timesyncd
	if [ ! -f "/lib/systemd/system/systemd-timesyncd.service" ] ; then
	    echo "Updating time synchronization service..."
  
	fi

	# mmdvmhost log backup services
	if [ ! -f "/lib/systemd/system/mmdvm-log-backup.service" ] ; then
	    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/Build-MMDVM-Log-Systemd-Tasks.sh -o /tmp/Build-MMDVM-Log-Systemd-Tasks.sh
	    bash /tmp/Build-MMDVM-Log-Systemd-Tasks.sh > /dev/null 2<&1
	    rm /tmp/Build-MMDVM-Log-Systemd-Tasks.sh
	fi

	# setup our own native NextionDriver service...
	# Updated 2/23/2023 - W0CHP:
	# TGIFspots contain really weird hacks/scripts, etc.[1] for their Nextion
	# screens, and it all collides with WPSD and our native Nextion driver
	# support.  So lets ignore TGIFspots altogether.
	# [1] <https://github.com/EA7KDO/Scripts>
    
	# Igore NextionDriver update, will do when I make it work in my BPi-M2
	echo "Igore NextionDriver update, will do when I make it work in my BPi-M2"
	# .........

	# m17 service installer bugfix:
	if [ ! -f "/etc/systemd/system/m17gateway.service" ] ; then
	    /usr/local/sbin/m17gateway.service install > /dev/null 2<&1
	    systemctl daemon-reload > /dev/null 2<&1
	fi

	# update installer
	curl -Ls -A "${uaStrSF}" ${W0CHP_INSTALL_SCRIPT_REPO} -o /usr/sbin/WPSD-Installer
	chmod +x /usr/sbin/WPSD-Installer

	# add CallLookupProvider to /etc/pistar-release if not there...
	if ! grep -q 'CallLookupProvider =' /etc/pistar-release ; then
	   sed -i '/ConfUpdReqd/a CallLookupProvider = QRZ' /etc/pistar-release
	fi

	# if css does not exist, install default one
	if [ ! -f "/etc/pistar-css.ini" ] ; then
	    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini
	fi

	# Fix up new P25Gateway Config Hostfile setup
	if [ ! -f /root/P25Hosts.txt ]; then
		touch /root/P25Hosts.txt
	fi

	# Fix up new NXDNGateway Config Hostfile setup
	if [ ! -f /root/NXDNHosts.txt ]; then
		touch /root/NXDNHosts.txt
	fi
	if [ ! -f /usr/local/etc/NXDNHostsLocal.txt ]; then
		touch /usr/local/etc/NXDNHostsLocal.txt
	fi

	# Download M17 Audio files if missing
	if [[ ! -d /usr/local/etc/M17_Audio ]]; then
		mkdir -p /usr/local/etc/M17_Audio/
        	curl -# -o /usr/local/etc/M17_Audio/de_DE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.m17
        	curl -# -o /usr/local/etc/M17_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.indx
        	curl -# -o /usr/local/etc/M17_Audio/dk_DK.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.m17
        	curl -# -o /usr/local/etc/M17_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.indx
        	curl -# -o /usr/local/etc/M17_Audio/en_GB.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.m17
        	curl -# -o /usr/local/etc/M17_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.indx
        	curl -# -o /usr/local/etc/M17_Audio/en_US.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.m17
        	curl -# -o /usr/local/etc/M17_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.indx
       		curl -# -o /usr/local/etc/M17_Audio/es_ES.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.m17
        	curl -# -o /usr/local/etc/M17_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.indx
        	curl -# -o /usr/local/etc/M17_Audio/fr_FR.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.m17
        	curl -# -o /usr/local/etc/M17_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.indx
        	curl -# -o /usr/local/etc/M17_Audio/it_IT.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.m17
        	curl -# -o /usr/local/etc/M17_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.indx
        	curl -# -o /usr/local/etc/M17_Audio/pl_PL.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.m17
        	curl -# -o /usr/local/etc/M17_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.indx
        	curl -# -o /usr/local/etc/M17_Audio/se_SE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.m17
        	curl -# -o /usr/local/etc/M17_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.indx    
    	fi

	# Add Portuguese voice files for DMRGateway and ircDDBGw if missing
	if [[ ! -f /usr/local/etc/DMR_Audio/pt_PT.ambe ]]; then
		curl -# -o /usr/local/etc/DMR_Audio/pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pt_PT.ambe
		curl -# -o /usr/local/etc/DMR_Audio/pt_PT.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pt_PT.indx
		chmod 664 /usr/local/etc/DMR_Audio/*.ambe
		chmod 664 /usr/local/etc/DMR_Audio/*.indx
	fi
	if [[ ! -f /usr/local/etc/ircddbgateway/pt_PT.ambe ]]; then
		curl -# -o /usr/local/etc/ircddbgateway/pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.ambe
		curl -# -o /usr/local/etc/ircddbgateway/pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.indx
		curl -# -o /usr/local/etc/ircddbgateway/TIME_pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.ambe
		curl -# -o /usr/local/etc/ircddbgateway/TIME_pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.indx
		chmod 664 /usr/local/etc/ircddbgateway/*.ambe
		chmod 664 /usr/local/etc/ircddbgateway/*.indx
	fi
	
	if [[ $(grep "\[Voice\]" /etc/p25gateway | wc -l) -eq 0 ]]; then
		echo "" >> /etc/p25gateway
		sed -i '$a[Voice]\nEnabled=1\nLanguage=en_GB\nDirectory=/usr/local/etc/P25_Audio\n' /etc/p25gateway
	fi

        if [ -f /usr/local/bin/platformDetect.sh ]; then # remove platformDetect.sh since we have a custom version in /usr/local/sbin
		rm -f /usr/local/bin/platformDetect.sh
        fi

	if ! grep -q TIME_FORMAT /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
		sed -i "/^date_default_timezone_set.*/i define('TIME_FORMAT', '24');" /var/www/dashboard/config/config.php
	fi

	if ! grep -q AUTO_UPDATE_CHECK /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
		sed -i "/^date_default_timezone_set.*/i define('AUTO_UPDATE_CHECK', 'true');" /var/www/dashboard/config/config.php
	fi

	# add hw cache to rc.local
	if ! grep -q 'hwcache' /etc/rc.local ; then
    	    sed -i '/^\/usr\/local\/sbin\/pistar-motdgen/a \\n\n# cache hw info\n\/usr\/local\/sbin\/pistar-hwcache' /etc/rc.local 
	    /usr/local/sbin/pistar-hwcache
	else
	    /usr/local/sbin/pistar-hwcache
	fi

	# MOTD
	bash /usr/local/sbin/pistar-motdgen

	# Add pistar-service bash completion if missing
	DEST="/usr/share/bash-completion/completions/pistar-services"
	if [ ! -f $DEST ] ; then
		echo "#!/bin/bash" > $DEST
		echo "" >> $DEST
		echo "_pistar_services()" >> $DEST
		echo "{" >> $DEST
		echo "    local cur prev words cword" >> $DEST
		echo "    _init_completion -n = || return" >> $DEST
		echo "" >> $DEST
		echo "    _expand || return 0" >> $DEST
		echo "" >> $DEST
		echo "    COMPREPLY=( \$( compgen -W 'start stop restart fullstop status' -- \"\$cur\" ) )" >> $DEST
		echo "" >> $DEST
		echo "} &&" >> $DEST
		echo "complete -F _pistar_services pistar-services" >> $DEST
		echo "" >> $DEST
		chown root:root $DEST
		chmod 0644 $DEST
	fi

	# Get and cache latest W0CHP-PiStar-Dash version from remote Git repo:
	gitFolder="/var/www/dashboard"
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
	gitBranch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"
	gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck Version Cacher (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git ls-remote --heads ${gitRemoteURL} ${gitBranch} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
	echo ${gitStatusRemote} > /etc/.W0CHP-PiStar-Dash.remote_version

	# log file perms
	chown -R mmdvm:mmdvm /var/log/pi-star > /dev/null 2>&1
	chmod 775 /var/log/pi-star > /dev/null 2>&1

    echo "Run patch scripts for BPiM2 ..."
    echo "Disable Nginx access.log ..."
    sudo sh -c 'echo "" > /var/log/nginx/access.log' 
    sudo sed -i  "/access_log \/var\/log\/nginx\/access.log;/d" /etc/nginx/nginx.conf
    sudo sed -i '/error_log\ \/var\/log\/nginx\/error.log/ i\access_log off;' /etc/nginx/nginx.conf
    sudo nginx -s reload
    
    echo "Disable BPiM2 HDMI sleep ..."
    sudo sed -i  "s#\#xserver-command=X#xserver-command=X\ -s\ 0\ -dpms#g" /etc/lightdm/lightdm.conf

	echo "fix DVSwitch log dir not create /var/log/mmdvm"
	if [ -f /lib/systemd/system/mmdvm_bridge.service ]; then 
		sudo sed -i  "/ExecStartPre/d" /lib/systemd/system/mmdvm_bridge.service
		sudo sed -i '/ExecStart=/ i\ExecStartPre=mkdir -p /var/log/mmdvm' /lib/systemd/system/mmdvm_bridge.service
		cat /lib/systemd/system/mmdvm_bridge.service
		sudo systemctl daemon-reload
		sudo systemctl restart mmdvm_bridge.service
		sudo systemctl status mmdvm_bridge.service
	fi

	echo "fix DVSwitch log dir not create /var/log/dvswitch"
	if [ -f /lib/systemd/system/analog_bridge.service ]; then 
		sudo sed -i  "/ExecStartPre/d" /lib/systemd/system/analog_bridge.service
		sudo sed -i '/ExecStart=/ i\ExecStartPre=mkdir -p /var/log/dvswitch' /lib/systemd/system/analog_bridge.service
		cat /lib/systemd/system/analog_bridge.service
		sudo systemctl daemon-reload
		sudo systemctl restart analog_bridge.service
		sudo systemctl status analog_bridge.service
	fi
    
    echo "Add the follow to daily, hourly ..."
	echo "Shrink /var/log/mmdvm/MMDVM_Bridge-xxx.log log to stop it getting out of hand"
	MMDVM_BridgeLogFile=/var/log/mmdvm/MMDVM_Bridge-`date "+%Y-%m-%d"`.log
	if [ ! -f ${MMDVM_BridgeLogFile} ]; then   
	    MMDVM_BridgeLogFile=/var/log/mmdvm/MMDVM_Bridge-`date -d'-1 day' "+%Y-%m-%d"`.log    
	fi

	echo "Log file: ${MMDVM_BridgeLogFile}"
	echo "Just keep one days logs"
	sudo find /var/log/mmdvm/ ! -wholename ${MMDVM_BridgeLogFile} -type f -exec rm -f {} +

	if [ -f ${MMDVM_BridgeLogFile} ]; then   
		stat  ${MMDVM_BridgeLogFile}
		sudo sh -c "tail -500 ${MMDVM_BridgeLogFile} > ${MMDVM_BridgeLogFile}"
		stat  ${MMDVM_BridgeLogFile}
	fi

	# Shrink /var/log/Analog_Bridge.log log to stop it getting out of hand
	echo "$(tail -500 /var/log/Analog_Bridge.log)" > /var/log/Analog_Bridge.log

	# run any slipstream tasks
	bash /usr/local/sbin/slipstream-tasks.sh > /dev/null 2>&1

	echo -e "${TICK} Maintenance tasks complete!\n"

	echo "Starting Services..."
	pistar-services start > /dev/null 2>&1
	echo -e "${TICK} Done!\n"

	echo "Updates complete, syncing disk cache..."
	rm /root/.WPSD-updating > /dev/null 2>&1
	/bin/sync
	/bin/sync
	/bin/sync
	systemctl start cron.service > /dev/null 2<&1
	echo -e "${TICK} Update Process Finished!"
	if [ ! -t 1 ]; then # only output if not called from tty
		echo -e "\n<b><a style='color:white;text-decoration:underline;'' href='/config/changelog.php'>See the extended ChangeLog of the last 20 changes...</a></b>\n"
	fi
}

	if [ -t 1 ]; then
 		# run via terminal, only output to screen
 		main_function
	else
 		# if not run via terminal, log everything into a log file
 		main_function >> /var/log/pi-star/pi-star_update.log 2>&1
	fi

exit 0
