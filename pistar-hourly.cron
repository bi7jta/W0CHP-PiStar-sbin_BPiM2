#!/bin/bash
#
# Pi-Star Hourly Cron Job Script W0CHP v3.0
#

mount -o remount,rw / # for shits and giggles

# migrate config update notice
if grep -q ConfUpdReqd /etc/mmdvmhost ; then
    grep ConfUpdReqd /etc/mmdvmhost | sed 's/=/ = /' >> /etc/pistar-release
    sed -i '/^\[WPSD\]/d' /etc/mmdvmhost
    sed -i '/^ConfUpdReqd/d' /etc/mmdvmhost
else
    if ! grep -q ConfUpdReqd /etc/pistar-release ; then
	echo "ConfUpdReqd = " >> /etc/pistar-release
    fi
fi

# ensure repos can be updated
if ! grep -q 'safe' /root/.gitconfig > /dev/null 2<&1 ; then
    git config --global --add safe.directory /var/www/dashboard > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/bin > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/sbin > /dev/null 2<&1
fi

W0CHP_DASH_BRANCH="$( git --git-dir=/var/www/dashboard/.git branch | grep '*' | awk {'print $2'} )"
CONN_CHECK_URI="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Dash.git"
CALL=$( grep "Callsign" /etc/pistar-release | awk '{print $3}' )
osName=$( lsb_release -cs )
versionCmd=$( git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git rev-parse --short=10 HEAD )
psVer=$( grep Version /etc/pistar-release | awk '{print $3}' ) 
uuidStr=$(egrep 'UUID|ModemType|ModemMode|ControllerType' /etc/pistar-release | awk {'print $3'} | tac | xargs| sed 's/ /_/g')

# used to radomize the cron mins below
cronMins=$(shuf -i 0-59 -n 1)

modelName=$(grep -m 1 'model name' /proc/cpuinfo | sed 's/.*: //')
hardwareField=$(grep 'Model' /proc/cpuinfo | sed 's/.*: //')
hwDeetz="${hardwareField} - ${modelName}"
uaStr="ConnCheck (Hourly-Cron [${cronMins}]) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]"

# connectivity check
status_code=$(curl -I -m 3 -A "${uaStr}" --write-out %{http_code} --silent --output /dev/null "$CONN_CHECK_URI")
if [[ $status_code == 20* ]] || [[ $status_code == 30* ]] ; then
    echo "repo connection OK"
    # Update sbin
    #env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-hourly-sbin-Updater (Hourly-Cron [${cronMins}]) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git pull origin master
    # Get and cache latest W0CHP-PiStar-Dash version from remote Git repo:
    gitFolder="/var/www/dashboard"
    gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
    gitBranch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"
    gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck Version Cacher (Hourly-Cron [${cronMins}]) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git ls-remote --heads ${gitRemoteURL} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
    echo ${gitStatusRemote} > /etc/.W0CHP-PiStar-Dash.remote_version
else
    echo "repo connection failure"
fi

# Shrink NginX error log to stop it getting out of hand
echo "$(tail -500 /var/log/nginx/error.log)" > /var/log/nginx/error.log

# Clean up systemd logs
journalctl --rotate
journalctl --vacuum-time=24h
journalctl --vacuum-size=5M

# Remove extraneous PHP session files
(cd /var/lib/php*/sessions/ && rm -f \!\("sess_pistardashsess"\))

# logfile perms
chown -R mmdvm:mmdvm /var/log/pi-star
chmod 775 /var/log/pi-star


echo "Shrink /var/log/mmdvm/MMDVM_Bridge-xxx.log log to stop it getting out of hand"
MMDVM_BridgeLogFile=/var/log/mmdvm/MMDVM_Bridge-`date "+%Y-%m-%d"`.log
if [ ! -f ${MMDVM_BridgeLogFile} ]; then   
    MMDVM_BridgeLogFile=/var/log/mmdvm/MMDVM_Bridge-`date -d'-1 day' "+%Y-%m-%d"`.log    
fi

echo "Log file: ${MMDVM_BridgeLogFile}"
echo "Just keep one days logs"
sudo find /var/log/mmdvm/ ! -wholename ${MMDVM_BridgeLogFile} -type f -exec rm -f {} +

if [ -f ${MMDVM_BridgeLogFile} ]; then   
    stat  ${MMDVM_BridgeLogFile}
    sudo sh -c "tail -500 ${MMDVM_BridgeLogFile} > ${MMDVM_BridgeLogFile}"
    stat  ${MMDVM_BridgeLogFile}
fi

# Shrink /var/log/Analog_Bridge.log log to stop it getting out of hand
echo "$(tail -500 /var/log/Analog_Bridge.log)" > /var/log/Analog_Bridge.log

# Keep the Callsign/Name Lookup Temp files in check...helps with page/name lookup perf. (W0CHP - 12/2021)
if compgen -G "/tmp/Callsign_Name.txt*" > /dev/null; then
    if [[ $( wc -l /tmp/Callsign_Name.txt.TMP ) > "50" ]]; then
        echo "" > /tmp/Callsign_Name.txt.TMP
        echo "" > /tmp/Callsign_Name.txt
    fi
fi

# Shuffle the time for the next hourly crontab job
sed -i "/cron.hourly/c ${cronMins}  *   * * *   root    cd / && run-parts --report /etc/cron.hourly" /etc/crontab

# Generate /etc/motd
bash /usr/local/sbin/pistar-motdgen

# Update pertinent info in /etc/pistar-release
/usr/local/sbin/pistar-hwcache > /dev/null 2>&1

# run any slipstream tasks
bash /usr/local/sbin/slipstream-tasks.sh > /dev/null 2>&1

echo "======================================="
echo "show me the size: /var/log/... "
find /var/log -type f -exec du -h --apparent-size {} + | sort -rh
du -h /var/log 

echo ""
echo "Shrink : /var/log/ the file size larger than 1MB"
find /var/log/ -type f -size +1M -exec sh -c 'tail -n 500 {} > {}' \;
echo ""

echo "======================================="
echo "show me the size again: /var/log/... "
find /var/log -type f -exec du -h --apparent-size {} + | sort -rh
du -h /var/log 

/bin/sync
/bin/sync
/bin/sync
